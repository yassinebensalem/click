@model DDD.Application.ViewModels.BookViewModel

<div id='viewer' data-path="@($"{ViewBag.BookId}_{ViewBag.PDFPath}")"></div>
<script type="text/javascript">
	$(document).ready(function () {
		(async () => {
			var path = $('#viewer').attr("data-path")
			const headers = new Headers();
			var documentUrl = "/api/BookViewer/GetPDF?document=" + path
			var pdfString = '';
			const pdfResponse = await fetch(documentUrl, { headers }).then((response) => response.text())
				.then((text) => {
					pdfString = text;
				});

			WebViewer({
				path: '../../lib/PDFJSExpress/lib', // path to the PDF.js Express'lib' folder on your server
				licenseKey: '80GnI6A72Yi5LMnd5nWI',
				disabledElements: [
					'textPopup',
					'contextMenuPopup',
					'copyTextButton',
					'printButton',
					'toolsButton',
					'ribbons',
					'toggleNotesButton',
					'selectToolButton',
					'downloadButton'

				]
			}, document.getElementById('viewer'))
				.then(instance => {

					instance.UI.loadDocument(base64ToBlob(pdfString), { filename: 'file.pdf' })
					const docViewer = instance.docViewer;
					instance.UI.disableFeatures([instance.UI.Feature.Print]);
					instance.UI.disableFeatures([instance.UI.Feature.Copy]);
					instance.UI.setToolbarGroup('toolbarGroup-View');
					docViewer.on('documentLoaded', () => {
						docViewer.setCurrentPage(3);
						// call methods relating to the loaded document
					});
				});
		})()

	});

	function base64ToBlob(base64) {
		const binaryString = window.atob(base64);
		const len = binaryString.length;
		const bytes = new Uint8Array(len);
		for (let i = 0; i < len; ++i) {
			bytes[i] = binaryString.charCodeAt(i);
		}
		return new Blob([bytes], { type: 'application/pdf' });
	};
</script>

<style>
	/* iframe's parent node */
	div#viewer {
		position: fixed;
		width: 100%;
		height: 100%;
	}

		/* iframe itself */
		div#viewer > iframe {
			display: block;
			width: 100%;
			height: 100%;
			border: none;
		}
</style>
